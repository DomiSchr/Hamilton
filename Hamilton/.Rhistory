291425,
539907,
335810,
344872,
360048,
435284,
245305,
309838,
248455,
160796,
1008073,
255831,
459677,
186034,
"207573",
288071
)
Hamilton(population2, 106)
Hamilton <- function(p, h, q = 0) {
#  Largest remainder method for the Apportionment Problem
#  Author: Dominik Schröder
#
# Args:
#   p: a vector containing the population of each state per column.
#   h: the house size as variable.
#   q: the quota. Choose: 0 for Hare Quota(Default)
#                         1 for Droop Quota
#                         2 for Hagenbach-Bischoff Quota
#                         3 for Imperiali Quota
#
# Returns:
#   A Vector containing the allotment of seats.
if(h < 1){
stop("House size cannot be less than 1")
}
p <- data.frame(p)
psum <- sum(p[, 1])
if(q == 0){
#Hare Quota(Default):
a <- floor(psum / h)
} else if(q == 1){
#Droop Quota
a <- floor(1 + psum/(h + 1))
} else if(q == 2){
#Hagenbach-Bischoff Quota
a <-  floor(psum/(h + 1))
} else if(q == 3){
#Imperiali Quota
a <- floor(psum/(h + 2))
} else {
# Exception!
stop("Chosen quota option not valid!")
}
p["share.floor"] <- array(0, length(p[,1]))
p["fraction"] <- array(0, length(p[,1]))
for (i in 1:length(p[,1])) {
tmp <- p[i,1]
if(tmp < 0){
stop("Population size cannot be a negative value!")
} else if(tmp %% 1 != 0){
stop("Population size must be an integer value!")
}
tmp <- tmp / a
p[i, "share.floor"] <- floor(tmp)
p[i, "fraction"] <- tmp - floor(tmp)
}
if (sum(p[, "share.floor"]) == h) {
return(as.vector(p[["share.floor"]]))
}
p["result"] <- NA
p["result"] <- replicate(1, p[["share.floor"]])
ranks <- order(p$fraction, decreasing = TRUE)
for (i in 1:(h - sum(p[, "share.floor"]))) {
p[[ranks[i], "result"]] <-  p[[ranks[i], "result"]] + 1
}
return(as.vector(p[["result"]]))
}
population2 <- c(
1328726,
309694,
424057,
291425,
539907,
335810,
344872,
360048,
435284,
245305,
309838,
248455,
160796,
1008073,
255831,
459677,
186034,
"207573",
288071
)
Hamilton(population2, 106)
population2 <- c(
1328726,
309694,
424057,
291425,
539907,
335810,
344872,
360048,
435284,
245305,
309838,
248455,
160796,
1008073,
255831,
459677,
186034,
207573,
288071
)
Hamilton(population2, 106)
Hamilton <- function(p, h, q = 0) {
#  Largest remainder method for the Apportionment Problem
#  Author: Dominik Schröder
#
# Args:
#   p: a vector containing the population of each state per column.
#   h: the house size as variable.
#   q: the quota. Choose: 0 for Hare Quota(Default)
#                         1 for Droop Quota
#                         2 for Hagenbach-Bischoff Quota
#                         3 for Imperiali Quota
#
# Returns:
#   A Vector containing the allotment of seats.
if(h < 1){
stop("House size cannot be less than 1")
}
p <- data.frame(p)
psum <- sum(p[, 1])
if(q == 0){
#Hare Quota(Default):
a <- floor(psum / h)
} else if(q == 1){
#Droop Quota
a <- floor(1 + psum/(h + 1))
} else if(q == 2){
#Hagenbach-Bischoff Quota
a <-  floor(psum/(h + 1))
} else if(q == 3){
#Imperiali Quota
a <- floor(psum/(h + 2))
} else {
# Exception!
stop("Chosen quota option not valid!")
}
p["share.floor"] <- array(0, length(p[,1]))
p["fraction"] <- array(0, length(p[,1]))
for (i in 1:length(p[,1])) {
tmp <- p[i,1]
if(tmp < 0){
stop("Population size cannot be a negative value!")
} else if(tmp %% 1 != 0){
stop("Population size must be an integer value!")
}
tmp <- tmp / a
p[i, "share.floor"] <- floor(tmp)
p[i, "fraction"] <- tmp - floor(tmp)
}
if (sum(p[, "share.floor"]) == h) {
return(as.vector(p[["share.floor"]]))
}
p["result"] <- NA
p["result"] <- replicate(1, p[["share.floor"]])
ranks <- order(p$fraction, decreasing = TRUE)
for (i in 1:(h - sum(p[, "share.floor"]))) {
p[[ranks[i], "result"]] <-  p[[ranks[i], "result"]] + 1
}
return(as.vector(p[["result"]]))
}
population2 <- c(
1328726,
309694,
424057,
291425,
539907,
335810,
344872,
360048,
435284,
245305,
309838,
248455,
160796,
1008073,
255831,
459677,
186034,
207573,
288071
)
Hamilton(population2, 106)
population2 <- c(
1328726,
309694,
424057,
291425,
539907,
335810,
344872,
360048,
435284,
245305,
309838,
248455,
160796,
1008073,
255831,
459677,
186034,
207573,
288071
)
Hamilton(population2, 1)
Hamilton <- function(p, h, q = 0) {
#  Largest remainder method for the Apportionment Problem
#  Author: Dominik Schröder
#
# Args:
#   p: a vector containing the population of each state per column.
#   h: the house size as variable.
#   q: the quota. Choose: 0 for Hare Quota(Default)
#                         1 for Droop Quota
#                         2 for Hagenbach-Bischoff Quota
#                         3 for Imperiali Quota
#
# Returns:
#   A Vector containing the allotment of seats.
if(h < 1){
stop("House size cannot be less than 1!")
}
if(h < length(p)){
stop("House size cannot be smaller than number of states!")
}
p <- data.frame(p)
psum <- sum(p[, 1])
if(q == 0){
#Hare Quota(Default):
a <- floor(psum / h)
} else if(q == 1){
#Droop Quota
a <- floor(1 + psum/(h + 1))
} else if(q == 2){
#Hagenbach-Bischoff Quota
a <-  floor(psum/(h + 1))
} else if(q == 3){
#Imperiali Quota
a <- floor(psum/(h + 2))
} else {
# Exception!
stop("Chosen quota option not valid!")
}
p["share.floor"] <- array(0, length(p[,1]))
p["fraction"] <- array(0, length(p[,1]))
for (i in 1:length(p[,1])) {
tmp <- p[i,1]
if(tmp < 0){
stop("Population size cannot be a negative value!")
}
if(tmp %% 1 != 0){
stop("Population size must be an integer value!")
}
tmp <- tmp / a
p[i, "share.floor"] <- floor(tmp)
p[i, "fraction"] <- tmp - floor(tmp)
}
if (sum(p[, "share.floor"]) == h) {
return(as.vector(p[["share.floor"]]))
}
p["result"] <- NA
p["result"] <- replicate(1, p[["share.floor"]])
ranks <- order(p$fraction, decreasing = TRUE)
for (i in 1:(h - sum(p[, "share.floor"]))) {
p[[ranks[i], "result"]] <-  p[[ranks[i], "result"]] + 1
}
return(as.vector(p[["result"]]))
}
population2 <- c(
1328726,
309694,
424057,
291425,
539907,
335810,
344872,
360048,
435284,
245305,
309838,
248455,
160796,
1008073,
255831,
459677,
186034,
207573,
288071
)
Hamilton(population2, 1)
population2 <- c(
1328726,
309694,
424057,
291425,
539907,
335810,
344872,
360048,
435284,
245305,
309838,
248455,
160796,
1008073,
255831,
459677,
186034,
207573,
288071
)
Hamilton(population2, 106)
population2 <- c(
1328726,
309694,
424057,
291425,
539907,
335810,
344872,
360048,
435284,
245305,
309838,
248455,
160796,
1008073,
255831,
459677,
186034,
207573,
288071
)
Hamilton(population2, 106)
MinimumRange <- function(vector.population, integer.housesize) {
# Lexicographic Burt-Harris/Minimum range method for the Apportionment Problem
# Author: Dominik Schröder
#
# Args:
#   vector.population: a vector containing the population of each state per column.
#   integer.housesize: the house size as variable.
#
#
# Returns:
#   A Vector containing the optimized allotment of seats.
#
data <- data.frame("population" = vector.population)
integer.numberofstates <- length(vector.population)
#__________________________________________________________________________
#Create arbitrary allotment
data["allotment"] <- array(0, integer.numberofstates)
tmp <- floor(integer.housesize/integer.numberofstates)
for(i in 1:integer.numberofstates){
data[i, "allotment"] <- tmp
}
i <- 1
while(sum(data[, "allotment"]) < integer.housesize){
data[i, "allotment"] <- data[i, "allotment"] + 1
i <- (i + 1) %% (integer.housesize - 1)
}
#________________________________________________________________________
#Start of Algorithm:
data["avgconstituency"] <- array(0, integer.numberofstates)
# Looks at two elements in each iteration.
for (count in 0:(ceiling(integer.numberofstates / 2))) {
#_________________________________________________________________________________________
maxDisparity1 <- MaxDisparity(data)
#Optimization by adding one seat the the state with the largest average consituency size:
data <- CalcAvg(data)
ranks <- order(data[, "avgconstituency"])
#If Algorithm didn't find a new optimisation, bool is set to 1. Iteration continues
bool <- TRUE
while (bool) {
data[ranks[integer.numberofstates - count], "allotment"]  <- data[ranks[integer.numberofstates - count], "allotment"] + 1
data <- CalcAvg(data)
maxDisparity2 <- 0
integer.bestindex <- 0
bool <- FALSE
#Break when the first smaller disparity is found!
for (i in (1 + count):(integer.numberofstates - count))  {
if (i != ranks[integer.numberofstates - count]) {
data[i, "allotment"] <- data[i, "allotment"] - 1
maxDisparity2 <- MaxDisparity(data)
if (maxDisparity2 < maxDisparity1) {
maxDisparity1 <- maxDisparity2
integer.bestindex <- i
bool <- TRUE
}
data[i, "allotment"] <- data[i, "allotment"] + 1
}
}
data <- CalcAvg(data)
if (!bool) {
data[ranks[integer.numberofstates - count], "allotment"]  <- data[ranks[integer.numberofstates - count], "allotment"] - 1
} else {
data[integer.bestindex, "allotment"] <- data[integer.bestindex, "allotment"] - 1
}
data <- CalcAvg(data)
}
#_________________________________________________________________________
maxDisparity1 <- MaxDisparity(data)
#Optimization by adding one seat the the state with the largest average consituency size:
#TODO: Repeat this process until largest average consituency can't be optimized...
data <- CalcAvg(data)
bool <- TRUE
while (bool) {
data[ranks[1 + count], "allotment"]  <- data[ranks[1 + count], "allotment"] - 1
data <- CalcAvg(data)
maxDisparity2 <- 0
integer.bestindex <- 0
bool <- FALSE
#Break when the first smaller disparity is found!
for (i in (integer.numberofstates - count):(1 + count))  {
if (i != ranks[1 + count]) {
data[i, "allotment"] <- data[i, "allotment"] + 1
maxDisparity2 <- MaxDisparity(data)
if (maxDisparity2 < maxDisparity1) {
maxDisparity1 <- maxDisparity2
integer.bestindex <- i
bool <- TRUE
}
data[i, "allotment"] <- data[i, "allotment"] - 1
}
}
data <- CalcAvg(data)
if (bool == FALSE) {
data[ranks[integer.numberofstates - count], "allotment"]  <- data[ranks[integer.numberofstates - count], "allotment"] + 1
} else {
data[integer.bestindex, "allotment"] <- data[integer.bestindex, "allotment"] + 1
}
data <- CalcAvg(data)
}
}
return(data)
}
# Searches for largest and smallest element in the given array and calculates max.disparty with those.
MaxDisparity <- function(data){
data <- CalcAvg(data)
max <- max(data[, "avgconstituency"])
min <- min(data[, "avgconstituency"])
return(abs((max/min)-1))
}
CalcAvg <- function(data){
for (i in 1:length(data[, 1])) {
data[i, "avgconstituency"] <- data[i, "population"] / data[i, "allotment"]
}
return(data)
}
population2 <- c(
1328726,
309694,
424057,
291425,
539907,
335810,
344872,
360048,
435284,
245305,
309838,
248455,
160796,
1008073,
255831,
459677,
186034,
207573,
288071
)
MinimumRange(population2, 106)
population2 <- c(
1328726,
309694,
424057,
291425,
539907,
335810,
344872,
360048,
435284,
245305,
309838,
248455,
160796,
1008073,
255831,
459677,
186034,
207573,
288071,
228583
)
MinimumRange(population2, 106)
