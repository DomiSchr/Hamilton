#Hamilton-Method for the Apportionment Problem
a <- 3+7
a
#Hamilton-Method for the Apportionment Problem
test_function <- function(t){
t <- t + 1
return(t)
}
test_function(3)
#Hamilton-Method for the Apportionment Problem
test_function <- function(t){
return(t <- t + 1)
}
test_function(3)
test_function <- function(t){
return(t <- t + 1)
}
test_function(3)
test_function <- function(t){
return(t + 1)
}
test_function(3)
hamilton <- function(p, H){
return(p[1] + H)
}
p <- c(630, 480, 390, 500)
H <- 10
hamilton(p, H)
x <- 3
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- 0
for(x in p) {
P <- P + x
}
A <- p/H
share <- c(1:length(p))
tmp <- 1
for(x in p) {
share[tmp] <- p/A
tmp <- tmp + 1
}
return(share)
}
hamilton(c(630, 480, 390, 500), 10)
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- 0
for(x in p) {
P <- P + x
}
A <- p/H
share <- c(1:length(p))
tmp <- 1
#  for(x in p) {
#    share[tmp] <- p/A
#    tmp <- tmp + 1
#  }
return(length(p))
}
hamilton(c(630, 480, 390, 500), 10)
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- 0
for(x in p) {
P <- P + x
}
A <- p/H
share <- c(1:length(p))
tmp <- 1
#  for(x in p) {
#    share[tmp] <- p/A
#    tmp <- tmp + 1
#  }
return(share)
}
hamilton(c(630, 480, 390, 500), 10)
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- 0
for(x in p) {
P <- P + x
}
A <- p/H
share <- c(1:length(p))
tmp <- 1
for(x in p) {
share[tmp] <- p/A
tmp <- tmp + 1
}
return(share)
}
hamilton(c(630, 480, 390, 500), 10)
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- 0
for(x in p) {
P <- P + x
}
A <- p/H
share <- c(1:length(p))
tmp <- 1
for(x in p) {
share[tmp] <- p/A
tmp <- tmp + 1
tmp
}
return(share)
}
hamilton(c(630, 480, 390, 500), 10)
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- 0
for(x in p) {
P <- P + x
}
A <- p/H
share <- c(1:length(p))
tmp <- 1
for(x in p) {
share[tmp] <- p/A
tmp <- tmp + 1
}
return(share)
}
hamilton(c(630, 480, 390, 500), 10)
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- 0
for(x in p) {
P <- P + x
}
A <- p/H
p[p - 1]
return(p)
}
hamilton(c(630, 480, 390, 500), 10)
p <- c(630, 480, 390, 500)
p[p-1]
p[p > 20]
p[p > 500]
rm(p)
p <- c(630, 480, 390, 500)
p <- p[p/10]
p
p <- p[p + 1]
p
p <- c(630, 480, 390, 500)
p <- p[p + 1]
p <- c(630, 480, 390, 500)
p
p <- p[p + 1]
p
rm(p)
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- 0
for(x in p) {
P <- P + x
}
A <- p/H
p[p - 1]
return(P)
}
hamilton(p, 10)
hamilton(c(630, 480, 390, 500), 10)
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- 0
for(x in p) {
P <- P + x
}
A <- p/H
p[p - 1]
return(P)
}
p <- c(630, 480, 390, 500)
hamilton(p, 10)
t <- sum(p)
t
rm(p)
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- sum(c)
return(P)
}
p <- c(630, 480, 390, 500)
hamilton(p, 10)
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- sum(p)
return(P)
}
p <- c(630, 480, 390, 500)
hamilton(p, 10)
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- sum(p)
A <- P/H
return(A)
}
p <- c(630, 480, 390, 500)
hamilton(p, 10)
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- sum(p)
A <- P/H
return(P[1]/A)
}
p <- c(630, 480, 390, 500)
hamilton(p, 10)
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- sum(p)
A <- P/H
return(P[1])
}
p <- c(630, 480, 390, 500)
hamilton(p, 10)
p[1]
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- sum(p)
A <- P/H
return(p[1])
}
p <- c(630, 480, 390, 500)
hamilton(p, 10)
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- sum(p)
A <- P/H
return(p[1]/A)
}
p <- c(630, 480, 390, 500)
hamilton(p, 10)
share <- array(0, length(p))
share
rm(share)
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- sum(p)
A <- P/H
share <- array(0, length(p))
for(i in 1:length(p)){
share[i] <- p[i]/A
}
return(p[1]/A)
}
p <- c(630, 480, 390, 500)
hamilton(p, 10)
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- sum(p)
A <- P/H
share <- array(0, length(p))
for(i in 1:length(p)){
share[i] <- p[i]/A
}
return(share[1])
}
p <- c(630, 480, 390, 500)
hamilton(p, 10)
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- sum(p)
A <- P/H
share <- array(0, length(p))
share_floor <- array(0, length(p))
fraction <- array(0, length(p))
for(i in 1:length(p)){
share[i] <- p[i]/A
share_floor[i] <- floor(share[i])
}
return(share_floor[1])
}
p <- c(630, 480, 390, 500)
hamilton(p, 10)
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- sum(p)
A <- P/H
share <- array(0, length(p))
share_floor <- array(0, length(p))
fraction <- array(0, length(p))
for(i in 1:length(p)){
share[i] <- p[i]/A
share_floor[i] <- floor(share[i])
fraction[i] <- share[i] - share_floor
}
return(fraction[1])
}
p <- c(630, 480, 390, 500)
hamilton(p, 10)
rm(test_function())
View(test_function)
View(hamilton)
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- sum(p)
A <- P/H
share <- array(0, length(p))
share_floor <- array(0, length(p))
fraction <- array(0, length(p))
for(i in 1:length(p)){
share[i] <- p[i]/A
share_floor[i] <- floor(share[i])
fraction[i] <- share[i] - share_floor[i]
}
return(fraction[1])
}
p <- c(630, 480, 390, 500)
hamilton(p, 10)
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- sum(p)
A <- P/H
share <- array(0, length(p))
share_floor <- array(0, length(p))
fraction <- array(0, length(p))
for(i in 1:length(p)){
share[i] <- p[i]/A
share_floor[i] <- floor(share[i])
fraction[i] <- share[i] - share_floor[i]
}
return(sum(share_floor))
}
p <- c(630, 480, 390, 500)
hamilton(p, 10)
p2 <- data.frame("state"=c("A", "B", "C", "D"), "population" = c(630, 480, 390, 500))
P <- sum(p[,"population"])
p2 <- data.frame("state"=c("A", "B", "C", "D"), "population" = c(630, 480, 390, 500))
p[,"population"]
p2 <- data.frame("state"=c("A", "B", "C", "D"), "population" = c(630, 480, 390, 500))
p[2,]
p2 <- data.frame("state"=c("A", "B", "C", "D"), "population" = c(630, 480, 390, 500))
p2[2,]
p2[,"population"]
p2 <- data.frame("state"=c("A", "B", "C", "D"), "population" = c(630, 480, 390, 500))
P <- sum(p2[,"population"])
P
rm(P)
hamilton_df(p2, 10)
hamilton_df <- function(p, H){
P <- sum(p2[,"population"])
A <- P/H
share <- array(0, length(p))
share_floor <- array(0, length(p))
fraction <- array(0, length(p))
p[["share"]] <- share
}
#p1 <- c(630, 480, 390, 500)
p2 <- data.frame("state"=c("A", "B", "C", "D"), "population" = c(630, 480, 390, 500))
#hamilton(p1, 10)
hamilton_df(p2, 10)
hamilton_df <- function(p, H){
P <- sum(p2[,"population"])
A <- P/H
share <- array(0, length(p))
share_floor <- array(0, length(p))
fraction <- array(0, length(p))
p[["share"]] <- share
return(p)
}
#p1 <- c(630, 480, 390, 500)
p2 <- data.frame("state"=c("A", "B", "C", "D"), "population" = c(630, 480, 390, 500))
#hamilton(p1, 10)
hamilton_df(p2, 10)
hamilton_df <- function(p, H){
P <- sum(p2[,"population"])
A <- P/H
share <- array(0, length(p))
share_floor <- array(0, length(p))
fraction <- array(0, length(p))
p[["share"]] <- share
p[["share_floor"]] <- share_floor
p[["fraction"]] <- fraction
return(p)
}
#p1 <- c(630, 480, 390, 500)
p2 <- data.frame("state"=c("A", "B", "C", "D"), "population" = c(630, 480, 390, 500))
#hamilton(p1, 10)
hamilton_df(p2, 10)
hamilton_df <- function(p, H){
P <- sum(p2[,"population"])
A <- P/H
share <- array(0, length(p))
share_floor <- array(0, length(p))
fraction <- array(0, length(p))
p[["share"]] <- share
p[["share_floor"]] <- share_floor
p[["fraction"]] <- fraction
return(length(p))
}
#p1 <- c(630, 480, 390, 500)
p2 <- data.frame("state"=c("A", "B", "C", "D"), "population" = c(630, 480, 390, 500))
#hamilton(p1, 10)
hamilton_df(p2, 10)
hamilton_df <- function(p, H){
P <- sum(p2[,"population"])
A <- P/H
share <- array(0, length(p))
share_floor <- array(0, length(p))
fraction <- array(0, length(p))
p[["share"]] <- share
p[["share_floor"]] <- share_floor
p[["fraction"]] <- fraction
return(length(p[["population"]]))
}
#p1 <- c(630, 480, 390, 500)
p2 <- data.frame("state"=c("A", "B", "C", "D"), "population" = c(630, 480, 390, 500))
#hamilton(p1, 10)
hamilton_df(p2, 10)
hamilton_df <- function(p, H){
P <- sum(p2[,"population"])
A <- P/H
share <- array(0, length(p))
share_floor <- array(0, length(p))
fraction <- array(0, length(p))
p[["share"]] <- share
p[["share_floor"]] <- share_floor
p[["fraction"]] <- fraction
for(i in 1:length(p[["population"]])){
p[i,"share"] <- p[i,"population"]/A
p[i, "share_floor"] <- floor(p[i,"share"])
p[i, "fraction"] <-  p[i,"share"] - p[i, "share_floor"]
}
return(p)
}
#p1 <- c(630, 480, 390, 500)
p2 <- data.frame("state"=c("A", "B", "C", "D"), "population" = c(630, 480, 390, 500))
#hamilton(p1, 10)
hamilton_df(p2, 10)
#Hamilton-Method for the Apportionment Problem
hamilton <- function(p, H){
P <- sum(p2[,"population"])
A <- P/H
share <- array(0, length(p))
share_floor <- array(0, length(p))
fraction <- array(0, length(p))
p[["share"]] <- share
p[["share_floor"]] <- share_floor
p[["fraction"]] <- fraction
for(i in 1:length(p[["population"]])){
p[i,"share"] <- p[i,"population"]/A
p[i, "share_floor"] <- floor(p[i,"share"])
p[i, "fraction"] <-  p[i,"share"] - p[i, "share_floor"]
}
return(p)
if(sum(p[, "share_floor"]) == H){
return(p)
} else {
#TODO: Hier den SpaÃŸ weiter!! Sortieren und so!
}
}
p2 <- data.frame("state"=c("A", "B", "C", "D"), "population" = c(630, 480, 390, 500))
hamilton(p2, 10)
